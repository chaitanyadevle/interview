"""
Django settings for interview project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from datetime import timedelta

import environ
from corsheaders.defaults import default_headers

ROOT_DIR = environ.Path(__file__) - 3
APPS_DIR = ROOT_DIR.path("interview")

# Load operating system environment variables and then prepare to use them
env = environ.Env()
env.read_env("/.env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "rest_framework",
    "knox",
    "corsheaders",
    "simple_history",
    "drf_yasg",
    "django_filters",
    # 'rest_framework_simplejwt',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "interview.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(APPS_DIR.path("templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "interview.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

APPEND_SLASH = True


REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "interview.authentication.custom_jwt_authentication.CustomJWTAuthentication",
        "knox.auth.TokenAuthentication",
    ],
    "DATETIME_FORMAT": "%d/%m/%YT%H:%M:%S.%fZ",
    "DATE_FORMAT": "%d/%m/%Y",
    "DATE_INPUT_FORMATS": ["%d-%m-%Y", "%d %b %Y", "%d/%m/%Y", "%Y-%m-%d"],
    "TIME_FORMAT": "%H:%M",
    "TIME_INPUT_FORMATS": ["%H:%M"],
    "DATETIME_INPUT_FORMATS": [
        "%d-%m-%Y %H:%M",
        "%d %b %Y %H:%M",
        "%d/%m/%Y %H:%M",
        "%d-%m-%Y %H:%M:%S",
        "%d %b %Y %H:%M:%S",
        "%d/%m/%Y %H:%M:%S",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "interview.parsers.ujsonparser.UJSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "interview.renderers.ujsonrenderer.UJSONRenderer",
    ],
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "EXCEPTION_HANDLER": "core.exceptions.custom_exception_handler.custom_exception_handler",
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
}

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    "refresh-token",
    "secret-key",
    "X-Client",
    "X-Correlation-Id",
]
CORS_EXPOSE_HEADERS = ["access"]

SECURE_BROWSER_XSS_FILTER = True

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

AUTH_USER_MODEL = "core.User"

REST_KNOX = {
    "SECURE_HASH_ALGORITHM": "cryptography.hazmat.primitives.hashes.SHA512",
    "AUTH_TOKEN_CHARACTER_LENGTH": 64,
    "TOKEN_TTL": timedelta(minutes=20),
    "USER_SERIALIZER": "knox.serializers.UserSerializer",
    "TOKEN_LIMIT_PER_USER": None,
    "AUTO_REFRESH": True,
    "EXPIRY_DATETIME_FORMAT": REST_FRAMEWORK["DATETIME_FORMAT"],
}

JWT_SIGNING_KEY = env("JWT_SIGNING_KEY")
JWT_ALGORITHM = env("JWT_ALGORITHM")

# File Encryption
FILE_ENCRYPTION_PASS_PHRASE = env("FILE_ENCRYPTION_PASS_PHRASE")
FILE_ENCRYPTION_KEY_TYPE = env("FILE_ENCRYPTION_KEY_TYPE")
FILE_ENCRYPTION_KEY_LENGTH = env("FILE_ENCRYPTION_KEY_LENGTH")

MOBILE_REFRESH_TOKEN_LIFETIME_IN_DAYS = 15
WEB_REFRESH_TOKEN_LIFETIME_IN_MINS = 3 * 60

MOBILE_ACCESS_TOKEN_LIFETIME_IN_MINS = 2 * 60
WEB_ACCESS_TOKEN_LIFETIME_IN_MINS = 2 * 60

# access token is same for mobile and web, only
# refresh token lifetime are different

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=7),  # unused values
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=8),  # unused values
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": False,
    "SIGNING_KEY": JWT_SIGNING_KEY,
}

TASK_SECRET_KEY = env("TASK_SECRET_KEY")

CORS_ORIGIN_WHITELIST = [
    "http://localhost:8080",
    "http://localhost:8082",
    "http://localhost:8083",
    "http://localhost:3000",
]

ACTIVATE_JWT_ACCESS_TOKEN_BLACKLISTING = False
ACCESS_TOKEN_BLACK_LIST_TIMEOUT_IN_SEC = 2 * 60 * 60  # 2 hours
