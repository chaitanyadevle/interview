# Generated by Django 5.0.7 on 2024-07-20 12:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('deleted_on', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('slot_timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('slot_start_date_time', models.DateTimeField()),
                ('slot_end_date_time', models.DateTimeField()),
                ('slot_status', models.CharField(choices=[('OPEN', 'Open'), ('BOOKED', 'Booked'), ('PARTIAL', 'Partial Booked'), ('CANCELLED', 'Cancelled')], max_length=10)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_deleter', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('slot_recruiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots_as_recruiter', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'slot',
            },
        ),
        migrations.CreateModel(
            name='SubSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('deleted_on', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('sub_slot_start_date_time', models.DateTimeField()),
                ('sub_slot_end_date_time', models.DateTimeField()),
                ('sub_slot_status', models.CharField(choices=[('BOOKED', 'Booked'), ('CANCELLED', 'Cancelled')], max_length=10)),
                ('sub_slot_booked_for', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_deleter', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
                ('slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_slots', to='core.slot')),
                ('sub_slot_booked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots_as_hr', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subslot',
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('deleted_on', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('type_name', models.CharField(choices=[('INTERVIEWER', 'Interviewer'), ('ADMIN', 'Admin'), ('HR', 'HR')], max_length=16, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_creator', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_deleter', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_modifier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usertype',
            },
        ),
        migrations.AddConstraint(
            model_name='slot',
            constraint=models.CheckConstraint(check=models.Q(('slot_status__in', ['OPEN', 'BOOKED', 'PARTIAL', 'CANCELLED'])), name='slot_status_valid'),
        ),
        migrations.AddConstraint(
            model_name='slot',
            constraint=models.UniqueConstraint(condition=models.Q(('slot_status', 'OPEN')), fields=('slot_recruiter', 'slot_start_date_time', 'slot_end_date_time'), name='unique_open_slots_per_user'),
        ),
        migrations.AddConstraint(
            model_name='subslot',
            constraint=models.CheckConstraint(check=models.Q(('sub_slot_status__in', ['BOOKED', 'CANCELLED'])), name='subslot_status_valid'),
        ),
        migrations.AddConstraint(
            model_name='subslot',
            constraint=models.UniqueConstraint(condition=models.Q(('sub_slot_status', 'BOOKED')), fields=('slot', 'sub_slot_start_date_time', 'sub_slot_end_date_time'), name='unique_booked_sub_slots_per_user'),
        ),
        migrations.AddConstraint(
            model_name='usertype',
            constraint=models.CheckConstraint(check=models.Q(('type_name__in', ['INTERVIEWER', 'ADMIN', 'HR'])), name='usertype_type_name_valid'),
        ),
    ]
